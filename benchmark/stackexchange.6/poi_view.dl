%% projection + join 

%% describe the schema of sources and views
source poi('POI_ID':int, 'COL_A':int, 'COL_B':int, 'COL_C':int).
source points('POI_ID':int, 'COL_D':string, 'COL_E':string, 'COL_F':string).
view poi_view('POI_ID':int, 'COL_A':int, 'COL_B':int, 'COL_D':string, 'COL_E':string).


%% constraint
% PK 
PK(poi, ['POI_ID']).
PK(points, ['POI_ID']).
PK(poi_view, ['POI_ID']).


GET : [
    poi_view(POI_ID, COL_A, COL_B, COL_D, COL_E) :- poi(POI_ID, COL_A, COL_B, COL_C), points(POI_ID, COL_D, COL_E, COL_F).
].


IS : [
    poi0(ID,A,B,C) :- poi(ID,A,B,C).
    points0(ID,D,E,F) :- points(ID,D,E,F).
    poi_view0(ID,A,B,D,E) :- poi0(ID,A,B,C), points0(ID,D,E,F).
].


%% getprime begin

% rule for insertion to view
+poi_view(ID,A,B,D,E) :- +poi(ID,A,B,C), +points(ID,D,E,F), not poi(ID,A,B,_), not points(ID,D,E,_), C = 0, F = 'COL_F'.
+poi_view(ID,A,B,D,E) :- +poi(ID,A,B,C), points(ID,D,E,_), not poi(ID,A,B,_), C = 0.
+poi_view(ID,A,B,D,E) :- +points(ID,D,E,F), poi(ID,A,B,_), not points(ID,D,E,_), F = 'COL_F'.

% rule for deletion to view
-poi_view(ID,A,B,D,E) :- -poi(ID,A,B,C), points(ID,D,E,_).

%% getprime end


%% view definition
% poi_view(POI_ID, COL_A, COL_B, COL_D, COL_E) :- poi(POI_ID, COL_A, COL_B, COL_C), points(POI_ID, COL_D, COL_E, COL_F).
