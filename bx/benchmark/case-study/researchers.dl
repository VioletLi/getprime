// projection + selection + intersection

#include "./testcases/researchers/deletion.dl"

.type int <: number
.type string <: symbol

.decl ced0(EMP_NAME:string, DEPT_NAME:string)
.decl residents0(EMP_NAME:string, BIRTH_DATE:string, GENDER:string)
.decl researchers0(EMP_NAME:string)

.decl ced(EMP_NAME:string, DEPT_NAME:string)
.decl ced_del(EMP_NAME:string, DEPT_NAME:string)
.decl ced_ins(EMP_NAME:string, DEPT_NAME:string)

.decl residents(EMP_NAME:string, BIRTH_DATE:string, GENDER:string)
.decl residents_del(EMP_NAME:string, BIRTH_DATE:string, GENDER:string)
.decl residents_ins(EMP_NAME:string, BIRTH_DATE:string, GENDER:string)

.decl researchers(EMP_NAME:string)
.decl researchers_del(EMP_NAME:string)
.decl researchers_ins(EMP_NAME:string)

.decl researchers_prime(EMP_NAME:string)
.decl researchers_prime_del(EMP_NAME:string)
.decl researchers_prime_ins(EMP_NAME:string)

.decl ced_prime(EMP_NAME:string, DEPT_NAME:string)
.decl ced_prime_del(EMP_NAME:string, DEPT_NAME:string)
.decl ced_prime_ins(EMP_NAME:string, DEPT_NAME:string)

.decl residents_prime(EMP_NAME:string, BIRTH_DATE:string, GENDER:string)
.decl residents_prime_del(EMP_NAME:string, BIRTH_DATE:string, GENDER:string)
.decl residents_prime_ins(EMP_NAME:string, BIRTH_DATE:string, GENDER:string)

.decl precondition(errNo:string)


// -- constraints --
// empty


// -- initial source and view --

ced0(E, D) :- ced(E, D).
residents0(E, B, G) :- residents(E, B, G).
researchers0(E) :- residents0(E, _, _) , ced0(E, D) , D = "Research".


// -- get --

researchers(EMP_NAME) :- researchers0(EMP_NAME) , ! researchers_del(EMP_NAME).
researchers(EMP_NAME) :- researchers_ins(EMP_NAME).
ced_ins(EMP_NAME, DEPT_NAME) :- ced(EMP_NAME, DEPT_NAME) , ! ced0(EMP_NAME, DEPT_NAME).
ced_del(EMP_NAME, DEPT_NAME) :- ced0(EMP_NAME, DEPT_NAME) , ! ced(EMP_NAME, DEPT_NAME).
residents_ins(EMP_NAME, BIRTH_DATE, GENDER) :- residents(EMP_NAME, BIRTH_DATE, GENDER) , ! residents0(EMP_NAME, BIRTH_DATE, GENDER).
residents_del(EMP_NAME, BIRTH_DATE, GENDER) :- residents0(EMP_NAME, BIRTH_DATE, GENDER) , ! residents(EMP_NAME, BIRTH_DATE, GENDER).
researchers_del(E) :- ced_del(E, D) , ced(E, D) , residents(E, _, _) , D = "Research".
researchers_ins(E) :- residents_ins(E, B, G) , ced_ins(E, D) , ! residents(E, _, _) , ! ced(E, D) , B = "0001-01-01" , G = "unknown" , D = "Research".
researchers_ins(E) :- ced_ins(E, D) , residents(E, _, _) , ! ced(E, D) , D = "Research".
researchers_ins(E) :- residents_ins(E, B, G) , ! residents(E, _, _) , ced(E, D) , B = "0001-01-01" , G = "unknown" , D = "Research".


// -- put --

researchers_prime_ins(EMP_NAME) :- researchers_prime(EMP_NAME) , ! researchers(EMP_NAME).
researchers_prime_del(EMP_NAME) :- researchers(EMP_NAME) , ! researchers_prime(EMP_NAME).
ced_prime_del(E, D) :- researchers_prime_del(E) , ced(E, D) , residents(E, _, _) , D = "Research" , ced(E, D).
residents_prime_ins(E, B, G) :- researchers_prime_ins(E) , ! residents(E, _, _) , ! ced(E, D) , B = "0001-01-01" , G = "unknown" , D = "Research" , ! residents(E, B, G) , ! ced(E, D).
ced_prime_ins(E, D) :- researchers_prime_ins(E) , ! residents(E, _, _) , ! ced(E, D) , B = "0001-01-01" , G = "unknown" , D = "Research" , ! residents(E, B, G) , ! ced(E, D).
ced_prime_ins(E, D) :- researchers_prime_ins(E) , residents(E, _, _) , ! ced(E, D) , D = "Research" , ! ced(E, D).
residents_prime_ins(E, B, G) :- researchers_prime_ins(E) , ! residents(E, _, _) , ced(E, D) , B = "0001-01-01" , G = "unknown" , D = "Research" , ! residents(E, B, G).

ced_prime(E, D) :- ced(E, D), ! ced_prime_del(E, D).
ced_prime(E, D) :- ced_prime_ins(E, D).

residents_prime(E, B, G) :- residents(E, B, G), ! residents_prime_del(E, B, G).
residents_prime(E, B, G) :- residents_prime_ins(E, B, G).


// -- output --

.output precondition

.output ced
.output residents
.output researchers_prime

.output researchers
.output ced_prime
.output residents_prime