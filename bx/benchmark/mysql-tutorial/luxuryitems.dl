// selection

#include "./testcases/luxuryitems/mixture.dl"

.type int <: number
.type real <: float
.type string <: symbol

.decl items0(ID:int, NAME:string, PRICE:real)
.decl luxuryitems0(ID:int, NAME:string, PRICE:real)

.decl items(ID:int, NAME:string, PRICE:real)
.decl items_ins(ID:int, NAME:string, PRICE:real)
.decl items_del(ID:int, NAME:string, PRICE:real)

.decl luxuryitems(ID:int, NAME:string, PRICE:real)
.decl luxuryitems_ins(ID:int, NAME:string, PRICE:real)
.decl luxuryitems_del(ID:int, NAME:string, PRICE:real)

.decl luxuryitems_prime(ID:int, NAME:string, PRICE:real)
.decl luxuryitems_prime_ins(ID:int, NAME:string, PRICE:real)
.decl luxuryitems_prime_del(ID:int, NAME:string, PRICE:real)

.decl items_prime(ID:int, NAME:string, PRICE:real)
.decl items_prime_ins(ID:int, NAME:string, PRICE:real)
.decl items_prime_del(ID:int, NAME:string, PRICE:real)

.decl precondition(errNo:string)


// -- constraints --

precondition("error1") :- _prime(ID, NAME, PRICE) , PRICE <= 700.0.
precondition("error2") :- items0(_, _, _).
precondition("error3") :- luxuryitems0(_, _, _).


// -- initial source and view --
// emtpy


// -- get --

luxuryitems(ID, NAME, PRICE) :- luxuryitems0(ID, NAME, PRICE) , ! luxuryitems_del(ID, NAME, PRICE).
luxuryitems(ID, NAME, PRICE) :- luxuryitems_ins(ID, NAME, PRICE).
items_ins(ID, NAME, PRICE) :- items(ID, NAME, PRICE) , ! items0(ID, NAME, PRICE).
items_del(ID, NAME, PRICE) :- items0(ID, NAME, PRICE) , ! items(ID, NAME, PRICE).
luxuryitems_del(ID, N, P) :- items_del(ID, N, P) , P > 700.0.
luxuryitems_ins(ID, N, P) :- items_ins(ID, N, P) , P > 700.0.


// -- put --

luxuryitems_prime_ins(ID, NAME, PRICE) :- luxuryitems_prime(ID, NAME, PRICE) , ! luxuryitems(ID, NAME, PRICE).
luxuryitems_prime_del(ID, NAME, PRICE) :- luxuryitems(ID, NAME, PRICE) , ! luxuryitems_prime(ID, NAME, PRICE).

items_prime_del(ID, N, P) :- luxuryitems_prime_del(ID, N, P) , P > 700.0 , items(ID, N, P).
items_prime_ins(ID, N, P) :- luxuryitems_prime_ins(ID, N, P) , P > 700.0 , ! items(ID, N, P).

items_prime(ID, N, P) :- items(ID, N, P), ! items_prime_del(ID, N, P).
items_prime(ID, N, P) :- items_prime_ins(ID, N, P).


// -- output --

.output precondition

.output items
.output luxuryitems_prime

.output luxuryitems
.output items_prime
